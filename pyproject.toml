[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "exp-platform-cli"
version = "0.1.0"
description = "A robust experimentation platform with support for local/cloud evaluation, foundry-style evaluators, and comprehensive error handling."
readme = "README.md"
requires-python = ">=3.10"
license = { text = "MIT" }
authors = [
  { name = "Experimentation Platform Team", email = "team@example.com" }
]
keywords = ["experimentation", "evaluation", "ai", "ml", "foundry", "azure"]
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Topic :: Software Development :: Testing",
  "Topic :: Utilities",
]
dependencies = [
  "click>=8.1,<9.0",
  "rich>=13,<14",
  "pydantic>=2.7,<3.0",
  "pyyaml>=6.0,<7.0",
  "pandas>=2.2,<3.0",
  "semantic-kernel>=1.36.0",
]

[project.urls]
Homepage = "https://github.com/example/exp-platform-cli"
Documentation = "https://github.com/example/exp-platform-cli/blob/main/README.md"
Repository = "https://github.com/example/exp-platform-cli.git"
Issues = "https://github.com/example/exp-platform-cli/issues"

[project.scripts]
exp-cli = "exp_platform_cli.cli:app_main"

[project.optional-dependencies]
dev = [
  "pytest>=8.0,<9.0",
  "ruff>=0.5.0,<0.6.0",
  "mypy>=1.8.0",
  "pre-commit>=3.0.0",
]
cloud = [
  "azure-ai-projects>=1.0.0b1",
  "azure-identity>=1.15.0",
]
all = [
  "exp-platform-cli[dev,cloud]"
]

[tool.uv]
managed = true
dev-dependencies = [
  "pytest>=8.0,<9.0",
  "ruff>=0.5.0,<0.6.0"
]

[tool.pytest.ini_options]
addopts = "-ra -v --tb=short"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.ruff]
line-length = 100
target-version = "py310"

[tool.ruff.lint]
select = [
  "E",  # pycodestyle errors
  "W",  # pycodestyle warnings
  "F",  # pyflakes
  "I",  # isort
  "B",  # flake8-bugbear
  "C4", # flake8-comprehensions
  "UP", # pyupgrade
]
ignore = [
  "E501",  # line too long, handled by formatter
  "B008",  # do not perform function calls in argument defaults
  "B904",  # raise-without-from-inside-except
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["B011"]  # assert-false

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
  "semantic_kernel.*",
  "azure.*",
]
ignore_missing_imports = true
